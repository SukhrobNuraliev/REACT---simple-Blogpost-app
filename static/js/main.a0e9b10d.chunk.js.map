{"version":3,"sources":["pokeball.png","components/Home.js","components/About.js","components/Contact.js","components/Navbar.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","state","posts","axios","get","then","res","console","log","setState","data","slice","this","postList","length","map","post","className","key","id","src","Kopto","title","body","to","style","marginBottom","Component","About","class","Contact","props","withRouter","href","data-target","Post","match","params","post_id","marginTop","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,gPCKtBC,E,4MACnBC,MAAQ,CACNC,MAAO,I,kEAEY,IAAD,OAClBC,IAAMC,IAAI,8CAA8CC,MAAK,SAACC,GAC5DC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZP,MAAOI,EAAII,KAAKC,MAAM,EAAG,W,+BAIrB,IACAT,EAAUU,KAAKX,MAAfC,MACFW,EAAWX,EAAMY,OACrBZ,EAAMa,KAAI,SAACC,GACT,OACE,yBAAKC,UAAU,gBAAgBC,IAAKF,EAAKG,IACvC,yBAAKF,UAAU,gBACb,yBAAKG,IAAKC,MAEV,0BAAMJ,UAAU,cAAcD,EAAKM,OACnC,2BAAIN,EAAKO,MACT,kBAAC,IAAD,CACEC,GAAI,IAAMR,EAAKG,GACfM,MAAO,CAAEC,aAAc,QACvBT,UAAU,0BAHZ,kBAYR,yBAAKA,UAAU,UAAf,gBAGF,OACE,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,UAAd,QACCJ,O,GAzCyBc,aCHnB,SAASC,IACtB,OACE,yBAAKX,UAAU,aACb,wBAAIA,UAAU,UAAd,SACA,uBAAGY,MAAM,aAAT,4lBCJS,SAASC,EAAQC,GAI9B,OACE,yBAAKd,UAAU,aACb,wBAAIA,UAAU,UAAd,WACA,uBAAGY,MAAM,aAAT,4lB,WCNSG,eAAW,SAAgBD,GACxC,OACE,6BACE,yBAAKd,UAAU,SACb,yBAAKY,MAAM,eACT,uBAAGI,KAAK,IAAIC,cAAY,cAAcL,MAAM,mBAC1C,uBAAGA,MAAM,kBAAT,UAEF,wBAAIA,MAAM,SACR,4BACE,kBAAC,IAAD,CAAML,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,mBCfOW,E,4MACnBlC,MAAQ,CACNe,KAAM,M,kEAEa,IAAD,OACdG,EAAKP,KAAKmB,MAAMK,MAAMC,OAAOC,QACjCnC,IACGC,IAAI,8CAAgDe,GACpDd,MAAK,SAACC,GACL,EAAKG,SAAS,CACZO,KAAMV,EAAII,OAEZH,QAAQC,IAAIF,Q,+BAIhB,IAAMU,EAAOJ,KAAKX,MAAMe,KACtB,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMO,GAAG,IAAIC,MAAO,CAAEc,UAAW,QAAUtB,UAAU,aAArD,QAGA,4BAAKL,KAAKX,MAAMe,KAAKM,OACrB,2BAAIV,KAAKX,MAAMe,KAAKO,OAGtB,yBAAKN,UAAU,UAAf,yBAGF,OAAO,yBAAKA,UAAU,aAAaD,O,GA5BLW,aCsBnBa,E,uKAhBX,OACE,kBAAC,IAAD,KACE,yBAAKvB,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,SAASC,UAAWf,IAChC,kBAAC,IAAD,CAAOc,KAAK,WAAWC,UAAWb,IAClC,kBAAC,IAAD,CAAOY,KAAK,YAAYC,UAAWR,W,GAV7BR,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCXNY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.a0e9b10d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Kopto from \"../pokeball.png\";\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    posts: [],\r\n  };\r\n  componentDidMount() {\r\n    axios.get(\"https://jsonplaceholder.typicode.com/posts\").then((res) => {\r\n      console.log(res);\r\n      this.setState({\r\n        posts: res.data.slice(0, 10),\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const { posts } = this.state;\r\n    const postList = posts.length ? (\r\n      posts.map((post) => {\r\n        return (\r\n          <div className=\"post card row\" key={post.id}>\r\n            <div className=\"card-content\">\r\n              <img src={Kopto}></img>\r\n\r\n              <span className=\"card-title\">{post.title}</span>\r\n              <p>{post.body}</p>\r\n              <Link\r\n                to={\"/\" + post.id}\r\n                style={{ marginBottom: \"10px\" }}\r\n                className=\"btn green center right\"\r\n              >\r\n                Read More\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <div className=\"center\">No posts yet</div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"container home\">\r\n        <h4 className=\"center\">Home</h4>\r\n        {postList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">About</h4>\r\n      <p class=\"flow-text\">\r\n        One common flaw we've seen in many frameworks is a lack of support for\r\n        truly responsive text. While elements on the page resize fluidly, text\r\n        still resizes on a fixed basis. To ameliorate this problem, for text\r\n        heavy pages, we've created a class that fluidly scales text size and\r\n        line-height to optimize readability for the user. Line length stays\r\n        between 45-80 characters and line height scales to be larger on smaller\r\n        screens. To see Flow Text in action, slowly resize your browser and\r\n        watch the size of this text body change! Use the button above to toggle\r\n        off/on flow-text to see the difference!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Contact(props) {\r\n  // setTimeout(() => {\r\n  //   props.history.push(\"/about\");\r\n  // }, 2000);\r\n  return (\r\n    <div className=\"container\">\r\n      <h4 className=\"center\">Contact</h4>\r\n      <p class=\"flow-text\">\r\n        One common flaw we've seen in many frameworks is a lack of support for\r\n        truly responsive text. While elements on the page resize fluidly, text\r\n        still resizes on a fixed basis. To ameliorate this problem, for text\r\n        heavy pages, we've created a class that fluidly scales text size and\r\n        line-height to optimize readability for the user. Line length stays\r\n        between 45-80 characters and line height scales to be larger on smaller\r\n        screens. To see Flow Text in action, slowly resize your browser and\r\n        watch the size of this text body change! Use the button above to toggle\r\n        off/on flow-text to see the difference!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link, NavLink, withRouter } from \"react-router-dom\";\r\n\r\nexport default withRouter(function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className=\"green\">\r\n        <div class=\"nav-wrapper\">\r\n          <a href=\"/\" data-target=\"mobile-demo\" class=\"sidenav-trigger\">\r\n            <i class=\"material-icons\">Salam</i>\r\n          </a>\r\n          <ul class=\"right\">\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/contact\">Contact</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n});\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Post extends Component {\r\n  state = {\r\n    post: null,\r\n  };\r\n  componentDidMount() {\r\n    let id = this.props.match.params.post_id;\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts/\" + id)\r\n      .then((res) => {\r\n        this.setState({\r\n          post: res.data,\r\n        });\r\n        console.log(res);\r\n      });\r\n  }\r\n  render() {\r\n    const post = this.state.post ? (\r\n      <div className=\"post\">\r\n        <Link to=\"/\" style={{ marginTop: \"10px\" }} className=\"btn black\">\r\n          Back\r\n        </Link>\r\n        <h4>{this.state.post.title}</h4>\r\n        <p>{this.state.post.body}</p>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\"> Loading the Post....</div>\r\n    );\r\n\r\n    return <div className=\"container\">{post}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Navbar from \"./components/Navbar\";\nimport Post from \"./components/Post\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"todo-app container\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={Contact} />\n            <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./materialize.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}